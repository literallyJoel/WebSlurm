<?php

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;


class JobTypes
{
    public function __construct()
    {

    }

    //Creates a new job type
    public function create(ServerRequestInterface $request, ResponseInterface $response): ResponseInterface
    {
        //Grab the users information from their decoded token
        $decodedToken = $request->getAttribute("decoded");
        //Grab the user ID to store with the job type
        $userID = $decodedToken->userID;
        //Grab the body of the request
        $body = json_decode($request->getBody());
        $name = $body->name ?? null;
        $script = $body->script ?? null;
        $parameters = $body->parameters ?? null;
        $imgUploadCount = $body->imgUploadCount ?? 0;
        $fileUploadCount = $body->fileUploadCount ?? 0;
        $validator = new Validator();
        //Validate the inputs
        if (!$validator->validateJobTypeCreation($body, $name, $parameters)) {
            $response->getBody()->write("Bad Request");
            return $response->withStatus(400);
        }

        //Open the database file
        $dbFile = __DIR__ . "/../data/db.db";
        $pdo = new PDO("sqlite:$dbFile");

        try {
            //Multiple tables - use a transaction
            $pdo->beginTransaction();
            //Add the job type to the database
            $stmt = $pdo->prepare("INSERT INTO jobTypes (jobName, script, userID, fileUploadCount, imgUploadCount) VALUES (:jobName, :script, :userID, :fileUploadCount, :imgUploadCount)");
            $stmt->bindParam(":jobName", $name);
            $stmt->bindParam(":script", $script);
            $stmt->bindParam(":userID", $userID);
            $stmt->bindParam(":fileUploadCount", $fileUploadCount);
            $stmt->bindParam(":imgUploadCount", $imgUploadCount);
            $stmt->execute();

            //Grab the autogenerated ID of the newly inserted job type
            $jobTypeID = $pdo->lastInsertId();
            //Add all the parameters to the parameter table
            foreach ($parameters as $param) {
                $stmt = $pdo->prepare("INSERT INTO jobTypeParams (paramName, paramType, defaultValue, jobTypeID) VALUES (:paramName, :paramType, :defaultValue, :jobTypeID)");
                $stmt->bindParam(":paramName", $param->name);
                $stmt->bindParam(":paramType", $param->type);
                $stmt->bindParam(":jobTypeID", $jobTypeID);
                $defaultVal = strval($param->default);
                $stmt->bindParam(":defaultValue", $defaultVal);
                $stmt->execute();
            }

        } catch (Exception $e) {
            //If anything goes wrong, rollback the transaction and error out
            $pdo->rollBack();
            error_log($e);
            $response->getBody()->write("Internal Server Error");
            return $response->withStatus(500);
        }
        //Else, commit the transaction and send an appropriate response to the client
        $ok = $pdo->commit();
        if ($ok) {
            $response->getBody()->write(json_encode(["jobTypeID" => $jobTypeID]));
            return $response->withStatus(200);
        } else {
            $response->getBody()->write("Internal Server Error");
            return $response->withStatus(500);
        }

    }

    //Retrieves all the job types
    public function getAll(ServerRequestInterface $request, ResponseInterface $response): ResponseInterface
    {
        // Open the database file
        $dbFile = __DIR__ . "/../data/db.db";
        $pdo = new PDO("sqlite:$dbFile");

        try {
            //Fetch the job types, their parameters, and their users
            $stmt = $pdo->prepare("
            SELECT 
                jt.jobTypeID AS id,
                jt.jobName AS name,
                jt.script AS script,
                jt.userID AS createdBy,
                u.userName AS createdByName,
                jt.fileUploadCount AS fileUploadCount,
                jt.imgUploadCount AS imgUploadCount,
                jtp.paramName AS paramName,
                jtp.paramType AS paramType,
                jtp.defaultValue AS defaultValue
            FROM jobTypes jt
            LEFT JOIN Users u ON jt.userID = u.userID
            LEFT JOIN jobTypeParams jtp ON jt.jobTypeID = jtp.jobTypeID
        ");
            $stmt->execute();

            $result = [];
            //Split the data into a format the front-end can use
            while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $jobTypeID = $row['id'];

                $paramData = [
                    'name' => $row['paramName'],
                    'type' => $row['paramType'],
                    'defaultValue' => $row['defaultValue'],
                ];

                // Check if the job type already exists in the result array
                if (!isset($result[$jobTypeID])) {
                    $result[$jobTypeID] = [
                        'id' => $jobTypeID,
                        'parameters' => [],
                        'script' => $row['script'],
                        'name' => $row['name'],
                        'createdBy' => $row['createdBy'],
                        'createdByName' => $row['createdByName'],
                        'fileUploadCount' => $row['fileUploadCount'],
                        'imgUploadCount' => $row['imgUploadCount']
                    ];
                }

                // Add parameters to the existing job type entry
                $result[$jobTypeID]['parameters'][] = $paramData;
            }

            //Send the data to the client
            $response->getBody()->write(json_encode(array_values($result)));
            return $response->withStatus(200);
        } catch (Exception $e) {
            error_log($e);
            $response->getBody()->write("Internal Server Error");
            return $response->withStatus(500);
        }
    }

    public function getById(ServerRequestInterface $request, ResponseInterface $response, array $args): ResponseInterface
    {
        //Grab the job type ID from the request
        $jobTypeId = $args['jobTypeID'];
        //Open the database file
        $dbFile = __DIR__ . "/../data/db.db";
        $pdo = new PDO("sqlite:$dbFile");

        try {
            //Grab the job type with the specified ID
            $stmt = $pdo->prepare("SELECT * FROM jobTypes WHERE jobTypeID = :jobTypeID");
            $stmt->bindParam(":jobTypeID", $jobTypeId);
            $stmt->execute();

            $jobType = $stmt->fetch(PDO::FETCH_ASSOC);

            //If the job type doesn't exist, send a 404 to the client
            if (!$jobType) {
                $response->getBody()->write("JobType not found");
                return $response->withStatus(404);
            }

            //Grab the parameters for the job type
            $jobTypeID = $jobType['jobTypeID'];
            $parametersStmt = $pdo->prepare("SELECT * FROM jobTypeParams WHERE jobTypeID = :jobTypeID");
            $parametersStmt->bindParam(":jobTypeID", $jobTypeID);
            $parametersStmt->execute();

            $parameters = [];
            //Add the parameters to the job type
            while ($param = $parametersStmt->fetch(PDO::FETCH_ASSOC)) {
                $paramData = [
                    'name' => $param['paramName'],
                    'type' => $param['paramType'],
                    'default' => $param['defaultValue'],
                ];
                $parameters[] = $paramData;
            }

            // Fetch user's name from Users table based on userID
            $userStmt = $pdo->prepare("SELECT userName FROM Users WHERE userID = :userID");
            $userStmt->bindParam(":userID", $jobType['userID']);
            $userStmt->execute();
            $user = $userStmt->fetch(PDO::FETCH_ASSOC);
            //Grab the name of the user who created the job type
            $createdByName = $user['userName'] ?? '';

            //Send the data to the client
            $jobTypeData = [
                'id' => $jobTypeID,
                'parameters' => $parameters,
                'script' => $jobType['script'],
                'name' => $jobType['jobName'],
                'createdBy' => $jobType['userID'],
                'createdByName' => $createdByName,
            ];

            $response->getBody()->write(json_encode($jobTypeData));
            return $response->withStatus(200);
        } catch (Exception $e) {
            error_log($e);
            $response->getBody()->write("Internal Server Error");
            return $response->withStatus(500);
        }
    }

    public function updateById(ServerRequestInterface $request, ResponseInterface $response, array $args): ResponseInterface
    {
        $jobTypeId = $args['jobTypeID'];


        $body = json_decode($request->getBody());
        $name = $body->name ?? null;
        $script = $body->script ?? null;
        $parameters = $body->parameters ?? [];

        $validator = new Validator();

        if (!$validator->validateJobTypeCreation((array)$body, $name, $parameters)) {
            $response->getBody()->write("Bad Request");
            return $response->withStatus(400);
        }

        $dbFile = __DIR__ . "/../data/db.db";
        $pdo = new PDO("sqlite:$dbFile");

        try {
            $pdo->beginTransaction();

            // Delete existing parameters for the job type
            $deleteParamsStmt = $pdo->prepare("DELETE FROM jobTypeParams WHERE jobTypeID = :jobTypeID");
            $deleteParamsStmt->bindParam(":jobTypeID", $jobTypeId);
            $deleteParamsStmt->execute();

            // Update the job type
            $updateJobTypeStmt = $pdo->prepare("UPDATE jobTypes SET jobName = :jobName, script = :script WHERE jobTypeID = :jobTypeID");
            $updateJobTypeStmt->bindParam(":jobTypeID", $jobTypeId);
            $updateJobTypeStmt->bindParam(":jobName", $name);
            $updateJobTypeStmt->bindParam(":script", $script);
            $updateJobTypeStmt->execute();

            // Insert new parameters
            foreach ($parameters as $param) {
                $insertParamsStmt = $pdo->prepare("INSERT INTO jobTypeParams (paramName, paramType, defaultValue, jobTypeID) VALUES (:paramName, :paramType, :defaultValue, :jobTypeID)");
                $insertParamsStmt->bindParam(":paramName", $param->name);
                $insertParamsStmt->bindParam(":paramType", $param->type);
                $insertParamsStmt->bindParam(":jobTypeID", $jobTypeId);
                $defaultVal = strval($param->default);
                $insertParamsStmt->bindParam(":defaultValue", $defaultVal);
                $insertParamsStmt->execute();
            }

            $pdo->commit();
            $response->getBody()->write("JobType updated successfully");
            return $response->withStatus(200);
        } catch (Exception $e) {
            $pdo->rollBack();
            error_log($e);
            $response->getBody()->write("Internal Server Error");
            return $response->withStatus(500);
        }
    }

    public function deleteById(ServerRequestInterface $request, ResponseInterface $response, array $args): ResponseInterface
    {
        $jobTypeId = $args['jobTypeID'];

        $dbFile = __DIR__ . "/../data/db.db";
        $pdo = new PDO("sqlite:$dbFile");

        try {
            $pdo->beginTransaction();

            // Delete job type parameters
            $deleteParamsStmt = $pdo->prepare("DELETE FROM jobTypeParams WHERE jobTypeID = :jobTypeID");
            $deleteParamsStmt->bindParam(":jobTypeID", $jobTypeId);
            $deleteParamsStmt->execute();

            // Delete the job type
            $deleteJobTypeStmt = $pdo->prepare("DELETE FROM jobTypes WHERE jobTypeID = :jobTypeID");
            $deleteJobTypeStmt->bindParam(":jobTypeID", $jobTypeId);
            $deleteJobTypeStmt->execute();

            $pdo->commit();
            $response->getBody()->write("JobType and parameters removed successfully");
            return $response->withStatus(200);
        } catch (Exception $e) {
            $pdo->rollBack();
            error_log($e);
            $response->getBody()->write("Internal Server Error");
            return $response->withStatus(500);
        }
    }


}