<?php

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

class Files
{
    //Used for getting the correct file extension for a given mime type
    //Taken from https://stackoverflow.com/questions/16511021/convert-mime-type-to-file-extension-php
    private function getExtension($mime)
    {
        $mime_map = [
            'video/3gpp2' => '3g2',
            'video/3gp' => '3gp',
            'video/3gpp' => '3gp',
            'application/x-compressed' => '7zip',
            'audio/x-acc' => 'aac',
            'audio/ac3' => 'ac3',
            'application/postscript' => 'ai',
            'audio/x-aiff' => 'aif',
            'audio/aiff' => 'aif',
            'audio/x-au' => 'au',
            'video/x-msvideo' => 'avi',
            'video/msvideo' => 'avi',
            'video/avi' => 'avi',
            'application/x-troff-msvideo' => 'avi',
            'application/macbinary' => 'bin',
            'application/mac-binary' => 'bin',
            'application/x-binary' => 'bin',
            'application/x-macbinary' => 'bin',
            'image/bmp' => 'bmp',
            'image/x-bmp' => 'bmp',
            'image/x-bitmap' => 'bmp',
            'image/x-xbitmap' => 'bmp',
            'image/x-win-bitmap' => 'bmp',
            'image/x-windows-bmp' => 'bmp',
            'image/ms-bmp' => 'bmp',
            'image/x-ms-bmp' => 'bmp',
            'application/bmp' => 'bmp',
            'application/x-bmp' => 'bmp',
            'application/x-win-bitmap' => 'bmp',
            'application/cdr' => 'cdr',
            'application/coreldraw' => 'cdr',
            'application/x-cdr' => 'cdr',
            'application/x-coreldraw' => 'cdr',
            'image/cdr' => 'cdr',
            'image/x-cdr' => 'cdr',
            'zz-application/zz-winassoc-cdr' => 'cdr',
            'application/mac-compactpro' => 'cpt',
            'application/pkix-crl' => 'crl',
            'application/pkcs-crl' => 'crl',
            'application/x-x509-ca-cert' => 'crt',
            'application/pkix-cert' => 'crt',
            'text/css' => 'css',
            'text/x-comma-separated-values' => 'csv',
            'text/comma-separated-values' => 'csv',
            'application/vnd.msexcel' => 'csv',
            'application/x-director' => 'dcr',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => 'docx',
            'application/x-dvi' => 'dvi',
            'message/rfc822' => 'eml',
            'application/x-msdownload' => 'exe',
            'video/x-f4v' => 'f4v',
            'audio/x-flac' => 'flac',
            'video/x-flv' => 'flv',
            'image/gif' => 'gif',
            'application/gpg-keys' => 'gpg',
            'application/x-gtar' => 'gtar',
            'application/x-gzip' => 'gzip',
            'application/mac-binhex40' => 'hqx',
            'application/mac-binhex' => 'hqx',
            'application/x-binhex40' => 'hqx',
            'application/x-mac-binhex40' => 'hqx',
            'text/html' => 'html',
            'image/x-icon' => 'ico',
            'image/x-ico' => 'ico',
            'image/vnd.microsoft.icon' => 'ico',
            'text/calendar' => 'ics',
            'application/java-archive' => 'jar',
            'application/x-java-application' => 'jar',
            'application/x-jar' => 'jar',
            'image/jp2' => 'jp2',
            'video/mj2' => 'jp2',
            'image/jpx' => 'jp2',
            'image/jpm' => 'jp2',
            'image/jpeg' => 'jpeg',
            'image/pjpeg' => 'jpeg',
            'application/x-javascript' => 'js',
            'application/json' => 'json',
            'text/json' => 'json',
            'application/vnd.google-earth.kml+xml' => 'kml',
            'application/vnd.google-earth.kmz' => 'kmz',
            'text/x-log' => 'log',
            'audio/x-m4a' => 'm4a',
            'audio/mp4' => 'm4a',
            'application/vnd.mpegurl' => 'm4u',
            'audio/midi' => 'mid',
            'application/vnd.mif' => 'mif',
            'video/quicktime' => 'mov',
            'video/x-sgi-movie' => 'movie',
            'audio/mpeg' => 'mp3',
            'audio/mpg' => 'mp3',
            'audio/mpeg3' => 'mp3',
            'audio/mp3' => 'mp3',
            'video/mp4' => 'mp4',
            'video/mpeg' => 'mpeg',
            'application/oda' => 'oda',
            'audio/ogg' => 'ogg',
            'video/ogg' => 'ogg',
            'application/ogg' => 'ogg',
            'font/otf' => 'otf',
            'application/x-pkcs10' => 'p10',
            'application/pkcs10' => 'p10',
            'application/x-pkcs12' => 'p12',
            'application/x-pkcs7-signature' => 'p7a',
            'application/pkcs7-mime' => 'p7c',
            'application/x-pkcs7-mime' => 'p7c',
            'application/x-pkcs7-certreqresp' => 'p7r',
            'application/pkcs7-signature' => 'p7s',
            'application/pdf' => 'pdf',
            'application/octet-stream' => 'pdf',
            'application/x-x509-user-cert' => 'pem',
            'application/x-pem-file' => 'pem',
            'application/pgp' => 'pgp',
            'application/x-httpd-php' => 'php',
            'application/php' => 'php',
            'application/x-php' => 'php',
            'text/php' => 'php',
            'text/x-php' => 'php',
            'application/x-httpd-php-source' => 'php',
            'image/png' => 'png',
            'image/x-png' => 'png',
            'application/powerpoint' => 'ppt',
            'application/vnd.ms-powerpoint' => 'ppt',
            'application/vnd.ms-office' => 'ppt',
            'application/msword' => 'doc',
            'application/vnd.openxmlformats-officedocument.presentationml.presentation' => 'pptx',
            'application/x-photoshop' => 'psd',
            'image/vnd.adobe.photoshop' => 'psd',
            'audio/x-realaudio' => 'ra',
            'audio/x-pn-realaudio' => 'ram',
            'application/x-rar' => 'rar',
            'application/rar' => 'rar',
            'application/x-rar-compressed' => 'rar',
            'audio/x-pn-realaudio-plugin' => 'rpm',
            'application/x-pkcs7' => 'rsa',
            'text/rtf' => 'rtf',
            'text/richtext' => 'rtx',
            'video/vnd.rn-realvideo' => 'rv',
            'application/x-stuffit' => 'sit',
            'application/smil' => 'smil',
            'text/srt' => 'srt',
            'image/svg+xml' => 'svg',
            'application/x-shockwave-flash' => 'swf',
            'application/x-tar' => 'tar',
            'application/x-gzip-compressed' => 'tgz',
            'image/tiff' => 'tiff',
            'font/ttf' => 'ttf',
            'text/plain' => 'txt',
            'text/x-vcard' => 'vcf',
            'application/videolan' => 'vlc',
            'text/vtt' => 'vtt',
            'audio/x-wav' => 'wav',
            'audio/wave' => 'wav',
            'audio/wav' => 'wav',
            'application/wbxml' => 'wbxml',
            'video/webm' => 'webm',
            'image/webp' => 'webp',
            'audio/x-ms-wma' => 'wma',
            'application/wmlc' => 'wmlc',
            'video/x-ms-wmv' => 'wmv',
            'video/x-ms-asf' => 'wmv',
            'font/woff' => 'woff',
            'font/woff2' => 'woff2',
            'application/xhtml+xml' => 'xhtml',
            'application/excel' => 'xl',
            'application/msexcel' => 'xls',
            'application/x-msexcel' => 'xls',
            'application/x-ms-excel' => 'xls',
            'application/x-excel' => 'xls',
            'application/x-dos_ms_excel' => 'xls',
            'application/xls' => 'xls',
            'application/x-xls' => 'xls',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => 'xlsx',
            'application/vnd.ms-excel' => 'xlsx',
            'application/xml' => 'xml',
            'text/xml' => 'xml',
            'text/xsl' => 'xsl',
            'application/xspf+xml' => 'xspf',
            'application/x-compress' => 'z',
            'application/x-zip' => 'zip',
            'application/zip' => 'zip',
            'application/x-zip-compressed' => 'zip',
            'application/s-compressed' => 'zip',
            'multipart/x-zip' => 'zip',
            'text/x-scriptzsh' => 'zsh',
        ];

        return $mime_map[$mime] ?? false;
    }

    //Gets the slurmout file for a non-array job with no custom output
    private function getDefaultOut($userId, $jobId, ResponseInterface $response): ResponseInterface
    {
        $filePath = __DIR__ . "/../usr/out/" . $userId . "/" . $jobId . "/slurmout";
        $finfo = new finfo(FILEINFO_MIME_TYPE);
        $mime = $finfo->file($filePath);
        $response = $response->withHeader("Content-Type", $mime);
        $response = $response->withHeader("Content-Disposition", "attachment; filename=" . $jobId . "." . $this->getExtension($mime));
        $response->getBody()->write(file_get_contents($filePath));
        return $response->withStatus(200);
    }

    //Gets the output files for a job with custom output, or a job with array support
    private function getCustomOut($userId, $jobId, ResponseInterface $response): ResponseInterface
    {
        //Get all the files in the directory
        $dir = __DIR__ . "/../usr/out/" . $userId . "/" . $jobId;
        $result = $this->getDirMetadata($dir);

        //Return the array of file names and extensions
        $response->getBody()->write(json_encode($result));
        return $response->withStatus(200);
    }

    private function downloadFile($jobId, $filePath, $response)
    {
        if (!file_exists($filePath)) {
            $response->getBody()->write("Bad Request");
            return $response->withStatus(400);
        }
        //Return the file to the client, appending the correct extension to the response for the given mime type
        $finfo = new finfo(FILEINFO_MIME_TYPE);
        $mime = $finfo->file($filePath);
        $response = $response->withHeader("Content-Type", $mime);
        $response = $response->withHeader("Content-Disposition", "attachment; filename=" . $jobId . "." . $this->getExtension($mime));

        $response->getBody()->write(file_get_contents($filePath));
        return $response->withStatus(200);
    }

    //Zips all the output files in a directory and returns the zip file
    private function zipAndDownload($dir, $response)
    {
        //If the zip file doesn't exist, create it
        if (!file_exists($dir . "slurmout.zip")) {
            $zip = new ZipArchive();
            $zip->open($dir . "slurmout.zip", ZipArchive::CREATE | ZipArchive::OVERWRITE);
            $files = scandir($dir);
            $files = array_filter($files, function ($file) {
                return $file !== "." && $file !== ".." && $file !== "slurmout.zip";
            });
            foreach ($files as $file) {
                $zip->addFile($dir . "/" . $file, $file);
            }
            $zip->close();
        }

        //Check if the file now exists, and if it doesn't return an error
        if (!file_exists($dir . "slurmout.zip")) {
            $response->getBody()->write("Internal Server Error");
            return $response->withStatus(500);
        } else {
            //Otherwise return the zip file
            $response = $response->withHeader("Content-Type", "application/zip");
            $response = $response->withHeader("Content-Disposition", "attachment; filename=slurmout.zip");
            $response->getBody()->write(file_get_contents($dir . "slurmout.zip"));
            return $response->withStatus(200);
        }
    }

    public function downloadOutputFile(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        //Grab the token and params
        $decoded = $request->getAttribute("decoded");
        $userId = $decoded->userID;
        $jobId = $args["jobID"];
        $file = $args["file"] ?? null;

        //Check if the job exists and belongs to the user
        $pdo = new PDO(DB_CONN);
        $stmt = $pdo->prepare("SELECT * FROM jobTypes JOIN jobs on JobTypes.jobTypeID = jobs.jobTypeID WHERE jobs.jobID = :jobID AND jobs.userID = :userID");
        $stmt->bindParam(":jobID", $jobId);
        $stmt->bindParam(":userID", $userId);
        $stmt->execute();
        $job = $stmt->fetch(PDO::FETCH_ASSOC);

        //If the job doesn't exist, return a 404
        if (!$job) {
            $response->getBody()->write("Bad Request");
            return $response->withStatus(400);
        }

        if (!$job["hasOutputFile"] && !$job["arrayJobSupport"]) {
            //If the job has no output file and doesn't support arrays, we just return the slurmout file
            return $this->getDefaultOut($userId, $jobId, $response);
        } else if ($job["hasOutputFile"] && $file === null) {
            //If the job has an output file or it's an array job, and the request isn't looking for a specific file
            //We return the metadata for all the files in the directory
            return $this->getCustomOut($userId, $jobId, $response);
        } else if ($file === "zip") {
            //If the file is "zip" we zip all the output files and return the zip file
            $dir = __DIR__ . "/../usr/out/" . $userId . "/" . $jobId . "/";
            return $this->zipAndDownload($dir, $response);
        } else {
            //Otherwise we return the specific file requested
            $filePath = __DIR__ . "/../usr/out/" . $userId . "/" . $jobId . "/" . $file;
            return $this->downloadFile($jobId, $filePath, $response);
        }

    }

    //Returns an array of the metadata of the contents a given folder
    private function getFolderData($filePath)
    {
        //Get the contents of the folder
        $result = $this->getDirMetadata($filePath);

        return $result;
    }

    public function downloadInputFile(ServerRequestInterface $request, ResponseInterface $response, array $args): ResponseInterface
    {
        $decoded = $request->getAttribute("decoded");
        $userId = $decoded->userID;
        $jobId = $args["jobID"];
        $file = $args["file"];

        $pdo = new PDO(DB_CONN);
        $stmt = $pdo->prepare("SELECT * FROM jobTypes JOIN jobs on JobTypes.jobTypeID = jobs.jobTypeID WHERE jobs.jobID = :jobID AND jobTypes.hasFileUpload = 1 AND jobs.userID = :userID");
        $stmt->bindParam(":jobID", $jobId);
        $stmt->bindParam(":userID", $userId);
        $stmt->execute();
        $job = $stmt->fetch(PDO::FETCH_ASSOC);
        if (!$job) {
            $response->getBody()->write("Bad Request");
            return $response->withStatus(400);
        }

        $stmt = $pdo->prepare("SELECT fileID FROM jobs WHERE jobID = :jobID AND userID = :userID");
        $stmt->bindParam(":jobID", $jobId);
        $stmt->bindParam(":userID", $userId);
        $stmt->execute();
        $fileId = $stmt->fetch(PDO::FETCH_ASSOC)["fileID"];

        //If there's no file ID provided, we assume they're downloading default output
        if (!$file) {
            $inFile = __DIR__ . "/../usr/in" . $userId . "/" . $jobId . "/" . $fileId;
            //If it's not an array job there'll be a single file or ZIP
            if (!$job["arrayJobSupport"]) {
                //Check if the default file is a zip
                $finfo = new finfo(FILEINFO_MIME_TYPE);
                $mime = $finfo->file($inFile);
                if ($mime === "application/zip") {
                    //If it is, we know there's an extracted folder, and we return metadata
                    $response->getBody()->write(json_encode($this->getFolderData($inFile . "-extracted")));
                    return $response->withStatus(200);
                } else {
                    //Otherwise we return the file
                    return $this->downloadFile($jobId, $inFile, $response);
                }
            } else {
                //If it is an array job we need to account for one or more zip files
                $results = [];
                for ($i = 0; $i < $job["arrayJobCount"]; $i++) {
                    $filePath = $inFile . ($i === 0 ? "" : "-$i") . "-extracted/";
                    if (file_exists($filePath)) {
                        $results[] = ["arrayId" => $i, "files" => $this->getFolderData($filePath)];
                    }
                }

                if (count($results) === 1) {
                    //If there's only one array job we return the metadata
                    $response->getBody()->write(json_encode($results[0]["files"]));
                } else {
                    //Otherwise we return the metadata for all the array jobs
                    $response->getBody()->write(json_encode($results));
                }
                return $response->withStatus(200);
            }
        } else {
            //If there's a file ID we assume they're downloading a specific file
            $inFile = __DIR__ . "/../usr/in" . $userId . "/" . $jobId . "/" . $file;
            return $this->downloadFile($jobId, $inFile, $response);
        }
    }

    /**
     * @param string $dir
     * @return array
     */
    private function getDirMetadata(string $dir): array
    {
        $files = scandir($dir);
        //Filter out the . and .. directories, and the zip file
        $files = array_filter($files, function ($file) {
            return $file !== "." && $file !== ".." && $file !== "slurmout.zip";
        });

        //Create an array of the file names and extensions
        $result = [];
        foreach ($files as $file) {
            $fileName = pathinfo($file, PATHINFO_FILENAME);
            if (!empty($fileName)) {
                $finfo = new finfo(FILEINFO_MIME_TYPE);
                $mime = $finfo->file($dir . "/" . $file);
                $ext = $this->getExtension($mime);
                if ($ext !== false) $result[] = ["fileName" => $fileName, "fileExtension" => $ext];
            }
        }
        return $result;
    }
}