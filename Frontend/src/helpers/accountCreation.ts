import crypto from "crypto-js";

//=======================================//
//===========Type Definitions===========//
//=====================================//
/*
Defines the type for a new account object. 
This is the shape the server expects when sending a new user
request
*/
export type NewAccountObject = {
  name: string;
  email: string;
  role: number;
  generatedPass: boolean;
  password?: string;
};

/*
Defines the type for the server response when an account creation request is sent.
There is always a code and a message, but only a generatedPass if one is requested.
*/
export type createAccountResponse = {
  message: string;
  userID: string;
  generatedPass?: string;
};

//=======================================//
//=======Create Account Function========//
//=====================================//
/*
The create account function can either take a users password or 
randomly generate a password for the user. We overload the 
function definition so that both options are available
*/

//=====Autogenerated Password=====//
export async function createAccount(
  name: string,
  email: string,
  role: number,
  generatePass: true
): Promise<createAccountResponse>;
//=======Password Provided========//
export async function createAccount(
  name: string,
  email: string,
  role: number,
  generatePass: false,
  password: string
): Promise<createAccountResponse>;
//=======Function Definition======//
export async function createAccount(
  name: string,
  email: string,
  role: number,
  generatePass: boolean,
  password?: string
): Promise<createAccountResponse> {
  if (generatePass === true) {
    return (
      await fetch("/api/users/create", {
        method: "POST",
        body: JSON.stringify({
          name: name,
          email: email,
          role: role,
          generatePass: true,
        }),
      })
    ).json();
  } else {
    /*
          We non-null coerce pasword here because the type
          definition of the function means if generatePass is false
          password must be defined, but TS doesn't pick this up.
          We hash on the server-side also, we just do so here so that
          the server never sees the users actual password.
    */
    const hashedPass = crypto.SHA512(password!).toString();
    return (
      await fetch("/api/users/create", {
        method: "POST",
        body: JSON.stringify({
          name: name,
          email: email,
          role: role,
          password: hashedPass,
          generatePass: false,
        }),
      })
    ).json();
  }
}
