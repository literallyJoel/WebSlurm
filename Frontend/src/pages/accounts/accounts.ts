import crypto from "crypto-js";

//=======================================//
//===========Type Definitions===========//
//=====================================//
/*
Defines the type for a new account object. 
This is the shape the server expects when sending a new user
request
*/
export type NewAccountObject = {
  name: string;
  email: string;
  role: number;
  generatedPass: boolean;
  password?: string;
};

/*
Defines the shape of the response sent by 
the server after updating an account
*/
export type UpdateAccountResponse = {
  userID: string;
  message: string;
  ok: boolean;
};
/*
Defines the type for the server response when an account creation request is sent.
There is always a code and a message, but only a generatedPass if one is requested.
*/
export type CreateAccountResponse = {
  message: string;
  userID: string;
  generatedPass?: string;
};

/*
Defines the object that is used for updating account information, 
it gets passed from the frontend to the helper function
*/
export type UpdateAccountObject = {
  name?: string;
  id?: string;
  email?: string;
  password?: string;
  role?: number;
};

//=======================================//
//=======Create Account Function========//
//=====================================//
/*
The create account function can either take a users password or 
randomly generate a password for the user. We overload the 
function definition so that both options are available
*/

//=====Autogenerated Password=====//
export async function createAccount(
  name: string,
  email: string,
  role: number,
  generatePass: true
): Promise<CreateAccountResponse>;
//=======Password Provided========//
export async function createAccount(
  name: string,
  email: string,
  role: number,
  generatePass: false,
  password: string
): Promise<CreateAccountResponse>;
//=======Function Definition======//
export async function createAccount(
  name: string,
  email: string,
  role: number,
  generatePass: boolean,
  password?: string
): Promise<CreateAccountResponse> {
  if (generatePass === true) {
    return (
      await fetch("/api/users/create", {
        method: "POST",
        body: JSON.stringify({
          name: name,
          email: email,
          role: role,
          generatePass: true,
        }),
      })
    ).json();
  } else {
    /*
          We non-null coerce pasword here because the type
          definition of the function means if generatePass is false
          password must be defined, but TS doesn't pick this up.
          We hash on the server-side also, we just do so here so that
          the server never sees the users actual password.
    */
    const hashedPass = crypto.SHA512(password!).toString();
    return (
      await fetch("/api/users/create", {
        method: "POST",
        body: JSON.stringify({
          name: name,
          email: email,
          role: role,
          password: hashedPass,
          generatePass: false,
        }),
      })
    ).json();
  }
}

//=======================================//
//=======Update Account Function========//
//=====================================//
/*
The update account function takes an object,
and calls the backend to update the users account
*/

export async function updateAccount(
  updateAccountObject: UpdateAccountObject
): Promise<UpdateAccountResponse> {
  const pass = updateAccountObject.password;

  if (pass) {
    updateAccountObject.password = crypto.SHA512(pass).toString();
  }

  return (
    await fetch("/api/users/update", {
      method: "PUT",
      body: JSON.stringify(updateAccountObject),
    })
  ).json();
}

//=======================================//
//=======Delete Account Function========//
//=====================================//
/*
The delete account function takes the users token,
and potentially a user ID for admin actions,
and calls for account deletion on the backend
*/
export async function deleteAccount(token: string, userID?: string) {
  return await fetch("/api/users/delete", {
    method: "DELETE",
    body: JSON.stringify({ userID: userID }),
    headers: { Authorization: `Bearer ${token}` },
  });
}
